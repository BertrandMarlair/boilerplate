/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */


import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    email<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Email";
    timestamp<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Timestamp";
    json<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Email";
    timestamp<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Timestamp";
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  Filter: { // input type
    inner_stack_operator?: NexusGenEnums['LogicalOperator'] | null; // LogicalOperator
    operator?: string | null; // String
    values?: string[] | null; // [String!]
  }
  FilterOperation: { // input type
    filters: NexusGenInputs['Filter'][]; // [Filter!]!
    inner_stack_operator?: NexusGenEnums['LogicalOperator'] | null; // LogicalOperator
    key: string; // String!
  }
  Pagination: { // input type
    filtrate: NexusGenInputs['FilterOperation'][]; // [FilterOperation!]!
    pagination?: NexusGenInputs['PaginationParams'] | null; // PaginationParams
  }
  PaginationParams: { // input type
    orderKey?: string | null; // String
    orderValue?: NexusGenEnums['Order'] | null; // Order
    page?: number | null; // Int
    pageSize?: number | null; // Int
  }
  editUserInput: { // input type
    name: string; // String!
    type: NexusGenEnums['TypeEnum']; // TypeEnum!
  }
  registerInput: { // input type
    name: string; // String!
    password: string; // String!
    passwordConfirmation: string; // String!
    type: NexusGenEnums['TypeEnum']; // TypeEnum!
  }
}

export interface NexusGenEnums {
  LogicalOperator: "and" | "or"
  Order: "ASC" | "DESC"
  PermissionEnum: "admin" | "guest" | "member"
  TypeEnum: "device" | "user"
}

export interface NexusGenRootTypes {
  AvailableFilter: { // root type
    formType: string; // String!
    key: string; // String!
    label: string; // String!
    type: string; // String!
    valid_operators: string[]; // [String!]!
  }
  Delete: { // root type
    id: number; // Int!
  }
  KeyRing: { // root type
    accessPublicKey: string; // String!
  }
  Login: { // root type
    accessToken?: string | null; // String
    identity?: NexusGenRootTypes['UserAuth'] | null; // UserAuth
    refreshToken?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Status: { // root type
    color: string; // String!
    title: string; // String!
  }
  TokensType: { // root type
    accessToken: string; // String!
    refreshToken: string; // String!
  }
  UserAuth: { // root type
    _id: string; // ID!
    createdAt: any; // Timestamp!
    name: string; // String!
    permission: NexusGenEnums['PermissionEnum']; // PermissionEnum!
    type: NexusGenEnums['TypeEnum']; // TypeEnum!
    updatedAt: any; // Timestamp!
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Email: any;
  Json: any;
  Timestamp: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  Filter: NexusGenInputs['Filter'];
  FilterOperation: NexusGenInputs['FilterOperation'];
  Pagination: NexusGenInputs['Pagination'];
  PaginationParams: NexusGenInputs['PaginationParams'];
  editUserInput: NexusGenInputs['editUserInput'];
  registerInput: NexusGenInputs['registerInput'];
  LogicalOperator: NexusGenEnums['LogicalOperator'];
  Order: NexusGenEnums['Order'];
  PermissionEnum: NexusGenEnums['PermissionEnum'];
  TypeEnum: NexusGenEnums['TypeEnum'];
}

export interface NexusGenFieldTypes {
  AvailableFilter: { // field return type
    formType: string; // String!
    key: string; // String!
    label: string; // String!
    type: string; // String!
    valid_operators: string[]; // [String!]!
  }
  Delete: { // field return type
    id: number; // Int!
  }
  KeyRing: { // field return type
    accessPublicKey: string; // String!
  }
  Login: { // field return type
    accessToken: string | null; // String
    identity: NexusGenRootTypes['UserAuth'] | null; // UserAuth
    refreshToken: string | null; // String
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['Login']; // Login!
    signin: NexusGenRootTypes['UserAuth']; // UserAuth!
  }
  Query: { // field return type
    checkAuthUser: NexusGenRootTypes['UserAuth']; // UserAuth!
    getCurrentUser: NexusGenRootTypes['UserAuth']; // UserAuth!
    keyRing: NexusGenRootTypes['KeyRing']; // KeyRing!
    refreshTokens: NexusGenRootTypes['TokensType']; // TokensType!
  }
  Status: { // field return type
    code: string; // String!
    color: string; // String!
    title: string; // String!
  }
  TokensType: { // field return type
    accessToken: string; // String!
    refreshToken: string; // String!
  }
  UserAuth: { // field return type
    _id: string; // ID!
    createdAt: any; // Timestamp!
    name: string; // String!
    permission: NexusGenEnums['PermissionEnum']; // PermissionEnum!
    type: NexusGenEnums['TypeEnum']; // TypeEnum!
    updatedAt: any; // Timestamp!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      name: string; // String!
      password: string; // String!
    }
    signin: { // args
      user?: NexusGenInputs['registerInput'] | null; // registerInput
    }
  }
  Query: {
    keyRing: { // args
      token: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AvailableFilter" | "Delete" | "KeyRing" | "Login" | "Mutation" | "Query" | "Status" | "TokensType" | "UserAuth";

export type NexusGenInputNames = "Filter" | "FilterOperation" | "Pagination" | "PaginationParams" | "editUserInput" | "registerInput";

export type NexusGenEnumNames = "LogicalOperator" | "Order" | "PermissionEnum" | "TypeEnum";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Email" | "Float" | "ID" | "Int" | "Json" | "String" | "Timestamp";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}